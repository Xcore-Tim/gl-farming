definitions:
  models.AccessRequest:
    properties:
      farmer:
        $ref: '#/definitions/models.Employee'
      teamID:
        type: integer
    type: object
  models.AccountRequest:
    properties:
      _id:
        type: string
      baseCurrency:
        $ref: '#/definitions/models.Currency'
      basePrice:
        type: number
      baseRate:
        type: number
      baseTotal:
        type: number
      buyer:
        $ref: '#/definitions/models.Employee'
      cancellationCause:
        type: string
      cancelledBy:
        $ref: '#/definitions/models.Employee'
      completedBy:
        $ref: '#/definitions/models.Employee'
      crossRate:
        type: number
      currency:
        $ref: '#/definitions/models.Currency'
      dateCancelled:
        type: integer
      dateCompleted:
        type: integer
      dateCreated:
        type: integer
      dateReturned:
        type: integer
      dateTaken:
        type: integer
      dateUpdated:
        type: integer
      description:
        type: string
      farmer:
        $ref: '#/definitions/models.Employee'
      fileName:
        type: string
      location:
        $ref: '#/definitions/models.Location'
      price:
        type: number
      quantity:
        type: integer
      rate:
        type: number
      returnedBy:
        $ref: '#/definitions/models.Employee'
      status:
        type: integer
      takenBy:
        $ref: '#/definitions/models.Employee'
      team:
        $ref: '#/definitions/models.Team'
      total:
        type: number
      type:
        $ref: '#/definitions/models.AccountType'
      updatedBy:
        $ref: '#/definitions/models.Employee'
      valid:
        type: integer
    type: object
  models.AccountType:
    properties:
      _id:
        type: string
      name:
        type: string
    type: object
  models.CancelAccountRequest:
    properties:
      cancellationCause:
        type: string
      requestID:
        type: string
    type: object
  models.CompleteAccountRequest:
    properties:
      currencyID:
        type: string
      price:
        type: number
      requestID:
        type: string
      valid:
        type: integer
    type: object
  models.CreateAccountRequest:
    properties:
      currencyID:
        type: string
      description:
        type: string
      locationID:
        type: string
      price:
        type: number
      quantity:
        type: integer
      typeID:
        type: string
    type: object
  models.Currency:
    properties:
      _id:
        type: string
      iso:
        type: string
      name:
        type: string
      symbol:
        type: string
    type: object
  models.Employee:
    properties:
      _id:
        type: integer
      fullName:
        type: string
      role:
        type: integer
    type: object
  models.EmployeePipeline:
    properties:
      price:
        type: number
      quantity:
        type: integer
      total:
        type: number
      uid:
        $ref: '#/definitions/models.Employee'
      valid:
        type: integer
    type: object
  models.FarmerAccess:
    properties:
      _id:
        type: string
      farmer:
        $ref: '#/definitions/models.Employee'
      team:
        type: integer
    type: object
  models.FarmerAccessList:
    properties:
      farmer:
        $ref: '#/definitions/models.Employee'
      teams:
        items:
          type: integer
        type: array
    type: object
  models.FullAccessRequest:
    properties:
      farmer:
        $ref: '#/definitions/models.Employee'
    type: object
  models.Location:
    properties:
      _id:
        type: string
      iso:
        type: string
      name:
        type: string
    type: object
  models.Period:
    properties:
      endDate:
        type: string
      startDate:
        type: string
    type: object
  models.ReturnAccountRequest:
    properties:
      _:
        $ref: '#/definitions/models.Employee'
      requestID:
        type: string
    type: object
  models.TableData:
    properties:
      _id:
        type: string
      baseCurrency:
        $ref: '#/definitions/models.Currency'
      basePrice:
        type: number
      baseRate:
        type: number
      baseTotal:
        type: number
      buyer:
        $ref: '#/definitions/models.Employee'
      cancellationCause:
        type: string
      cancelledBy:
        $ref: '#/definitions/models.Employee'
      completedBy:
        $ref: '#/definitions/models.Employee'
      crossRate:
        type: number
      currency:
        $ref: '#/definitions/models.Currency'
      dateCancelled:
        type: integer
      dateCompleted:
        type: integer
      dateCreated:
        type: integer
      dateReturned:
        type: integer
      dateTaken:
        type: integer
      dateUpdated:
        type: integer
      description:
        type: string
      farmer:
        $ref: '#/definitions/models.Employee'
      fileName:
        type: string
      location:
        $ref: '#/definitions/models.Location'
      price:
        type: number
      quantity:
        type: integer
      rate:
        type: number
      returnedBy:
        $ref: '#/definitions/models.Employee'
      status:
        type: integer
      takenBy:
        $ref: '#/definitions/models.Employee'
      team:
        $ref: '#/definitions/models.Team'
      total:
        type: number
      type:
        $ref: '#/definitions/models.AccountType'
      updatedBy:
        $ref: '#/definitions/models.Employee'
      valid:
        type: integer
    type: object
  models.TakeAccountRequest:
    properties:
      requestID:
        type: string
    type: object
  models.Team:
    properties:
      id:
        type: integer
      teamlead:
        $ref: '#/definitions/models.Employee'
    type: object
  models.TeamleadTableRequest:
    properties:
      period:
        $ref: '#/definitions/models.Period'
      status:
        type: integer
      uid:
        $ref: '#/definitions/models.UID'
    type: object
  models.UID:
    properties:
      roleID:
        type: integer
      teamID:
        type: integer
      token:
        type: string
      userID:
        type: integer
      username:
        type: string
    type: object
  models.UpdateAccountRequest:
    properties:
      currencyID:
        type: string
      description:
        type: string
      locationID:
        type: string
      price:
        type: number
      quantity:
        type: integer
      requestID:
        type: string
      typeID:
        type: string
    type: object
info:
  contact: {}
  description: Farming service API description.
  title: Gipsyland Farming
  version: "2.0"
paths:
  /v2/accountRequests/cancel:
    put:
      consumes:
      - application/json
      description: cancels account request
      parameters:
      - description: cancel request body info
        in: body
        name: cancelRequest
        schema:
          $ref: '#/definitions/models.CancelAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Cancel account request
      tags:
      - Account requests
  /v2/accountRequests/complete:
    put:
      consumes:
      - application/json
      description: Completes account request
      parameters:
      - description: complete request body
        in: body
        name: updateRequest
        schema:
          $ref: '#/definitions/models.CompleteAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Complete account request
      tags:
      - Account requests
  /v2/accountRequests/create:
    post:
      consumes:
      - application/json
      description: creates new account request
      parameters:
      - description: create request body info
        in: body
        name: createRequest
        schema:
          $ref: '#/definitions/models.CreateAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AccountRequest'
            type: array
      summary: Create account request
      tags:
      - Account requests
  /v2/accountRequests/delete/all:
    delete:
      consumes:
      - application/json
      description: deletes all account requests
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete all account requests
      tags:
      - Account requests
  /v2/accountRequests/return:
    put:
      consumes:
      - application/json
      description: Returns account request
      parameters:
      - description: request id
        in: body
        name: returnRequest
        required: true
        schema:
          $ref: '#/definitions/models.ReturnAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AccountRequest'
      summary: Return account request
      tags:
      - Account requests
  /v2/accountRequests/take:
    put:
      consumes:
      - application/json
      description: Takes account request in work
      parameters:
      - description: take request body
        in: body
        name: takeRequest
        schema:
          $ref: '#/definitions/models.TakeAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
      summary: Take account request in work
      tags:
      - Account requests
  /v2/accountRequests/update:
    put:
      consumes:
      - application/json
      description: Updates account request
      parameters:
      - description: update request body
        in: body
        name: updateRequest
        schema:
          $ref: '#/definitions/models.UpdateAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Update account request
      tags:
      - Account requests
  /v2/accountTypes/create:
    post:
      consumes:
      - application/json
      description: creates account type
      parameters:
      - description: account type body json
        in: body
        name: id
        required: true
        schema:
          $ref: '#/definitions/models.AccountType'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Create account type
      tags:
      - Account types
  /v2/accountTypes/delete:
    delete:
      consumes:
      - application/json
      description: Deletes account type by id
      parameters:
      - description: account type id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Delete account type
      tags:
      - Account types
  /v2/accountTypes/delete/all:
    delete:
      consumes:
      - application/json
      description: deletes all account types
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete all account types
      tags:
      - Account types
  /v2/accountTypes/get:
    get:
      consumes:
      - application/json
      description: get account types by id
      parameters:
      - description: account type id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AccountType'
      summary: Get account types
      tags:
      - Account types
  /v2/accountTypes/get/all:
    get:
      consumes:
      - application/json
      description: returns all account types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AccountType'
            type: array
      summary: Get all account types
      tags:
      - Account types
  /v2/currency/create:
    post:
      consumes:
      - application/json
      description: creates currency
      parameters:
      - description: currency body json
        in: body
        name: id
        required: true
        schema:
          $ref: '#/definitions/models.Currency'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Create currency
      tags:
      - Currency
  /v2/currency/delete:
    delete:
      consumes:
      - application/json
      description: Deletes currency by id
      parameters:
      - description: currency id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Delete currency
      tags:
      - Currency
  /v2/currency/delete/all:
    delete:
      consumes:
      - application/json
      description: deletes all currency
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete all currency
      tags:
      - Currency
  /v2/currency/get:
    get:
      consumes:
      - application/json
      description: get currency by id
      parameters:
      - description: currency id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Currency'
      summary: Get currency
      tags:
      - Currency
  /v2/currency/get/all:
    get:
      consumes:
      - application/json
      description: returns all currency
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Currency'
            type: array
      summary: Get all currency
      tags:
      - Currency
  /v2/farmerAccess/add:
    post:
      consumes:
      - application/json
      description: adds access to farmer
      parameters:
      - description: farmer uid
        in: body
        name: farmer
        schema:
          $ref: '#/definitions/models.AccessRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AccessRequest'
            type: array
      summary: Add access
      tags:
      - Farmer Access
  /v2/farmerAccess/add/all:
    put:
      consumes:
      - application/json
      description: Sets full access to all teams for farmer
      parameters:
      - description: farmer uid
        in: body
        name: fullAccessRequest
        schema:
          $ref: '#/definitions/models.FullAccessRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
      summary: Full access
      tags:
      - Farmer Access
  /v2/farmerAccess/get/all:
    get:
      consumes:
      - application/json
      description: returns all accesses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FarmerAccess'
            type: array
      summary: Get all accesses
      tags:
      - Table data
  /v2/farmerAccess/get/farmers:
    get:
      consumes:
      - application/json
      description: returns all farmers accesses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FarmerAccessList'
            type: array
      summary: Get farmer access
      tags:
      - Farmer Access
  /v2/farmerAccess/get/teams:
    get:
      consumes:
      - application/json
      description: returns all teams
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
      summary: Get teams
      tags:
      - Farmer Access
  /v2/farmerAccess/revoke:
    put:
      consumes:
      - application/json
      description: revokes access to farmer
      parameters:
      - description: farmer uid
        in: body
        name: accessRequest
        schema:
          $ref: '#/definitions/models.AccessRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AccessRequest'
            type: array
      summary: revoke access
      tags:
      - Farmer Access
  /v2/farmerAccess/revoke/all:
    put:
      consumes:
      - application/json
      description: Sets full access to all teams for farmer
      parameters:
      - description: farmer uid
        in: body
        name: fullAccessRequest
        schema:
          $ref: '#/definitions/models.FullAccessRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
      summary: Full access
      tags:
      - Farmer Access
  /v2/files/download/attachment:
    get:
      consumes:
      - application/json
      description: downloads attachment
      parameters:
      - description: file name
        in: query
        name: fileName
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Download attachment
      tags:
      - Files
  /v2/files/download/file:
    get:
      consumes:
      - application/json
      description: downloads file
      parameters:
      - description: file name
        in: query
        name: fileName
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Download file
      tags:
      - Files
  /v2/files/download/inline:
    get:
      consumes:
      - application/json
      description: downloads inline
      parameters:
      - description: file name
        in: query
        name: fileName
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Download inline
      tags:
      - Files
  /v2/locations/create:
    post:
      consumes:
      - application/json
      description: creates location
      parameters:
      - description: location body json
        in: body
        name: id
        required: true
        schema:
          $ref: '#/definitions/models.Location'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Create location
      tags:
      - Locations
  /v2/locations/delete:
    delete:
      consumes:
      - application/json
      description: Deletes location by id
      parameters:
      - description: location id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Delete location
      tags:
      - Locations
  /v2/locations/delete/all:
    delete:
      consumes:
      - application/json
      description: deletes all locations
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete all locations
      tags:
      - Locations
  /v2/locations/get:
    get:
      consumes:
      - application/json
      description: get location by id
      parameters:
      - description: location id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Location'
      summary: Get location
      tags:
      - Locations
  /v2/locations/get/all:
    get:
      consumes:
      - application/json
      description: returns all locations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Location'
            type: array
      summary: Get all locations
      tags:
      - Locations
  /v2/locations/update:
    patch:
      consumes:
      - application/json
      description: Updates location by id
      parameters:
      - description: location body
        in: body
        name: id
        required: true
        schema:
          $ref: '#/definitions/models.Location'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Update location
      tags:
      - Locations
  /v2/tableData/aggregate/buyers:
    get:
      consumes:
      - application/json
      description: returns buyer list
      parameters:
      - description: period start date
        in: query
        name: startDate
        type: string
      - description: period end date
        in: query
        name: endDate
        type: string
      - description: teamlead id
        in: query
        name: teamleadID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.EmployeePipeline'
            type: array
      summary: Get buyer list
      tags:
      - Table data
  /v2/tableData/aggregate/farmers:
    get:
      consumes:
      - application/json
      description: returns farmer list
      parameters:
      - description: period start date
        in: query
        name: startDate
        type: string
      - description: period end date
        in: query
        name: endDate
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.EmployeePipeline'
            type: array
      summary: Get farmer list
      tags:
      - Table data
  /v2/tableData/aggregate/teamleads:
    get:
      consumes:
      - application/json
      description: returns team list
      parameters:
      - description: period start date
        in: query
        name: startDate
        type: string
      - description: period end date
        in: query
        name: endDate
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.EmployeePipeline'
            type: array
      summary: Get team list
      tags:
      - Table data
  /v2/tableData/get:
    get:
      consumes:
      - application/json
      description: returns all account requests by period and employee
      parameters:
      - description: period start date
        in: query
        name: startDate
        type: string
      - description: period end date
        in: query
        name: endDate
        type: string
      - description: status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TableData'
            type: array
      summary: Get account requests by period and employee
      tags:
      - Table data
  /v2/tableData/get/all:
    get:
      consumes:
      - application/json
      description: returns all account requests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AccountRequest'
            type: array
      summary: Get all account requests
      tags:
      - Table data
  /v2/tableData/teamlead/get:
    post:
      consumes:
      - application/json
      description: returns all account requests by period and employee
      parameters:
      - description: status
        in: body
        name: getTeamleadTables
        schema:
          $ref: '#/definitions/models.TeamleadTableRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TableData'
            type: array
      summary: Get account requests by period and employee
      tags:
      - Table data
swagger: "2.0"
